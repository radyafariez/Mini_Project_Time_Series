# -*- coding: utf-8 -*-
"""[Mini Project] Time Series - Mohammad Radya Fariez.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tip6kapZ7vYIZr_TSjQ1CAQkn2XocmQC
"""

#tujuan : Memprediksi data di waktu mendatang, mengisi data kosong, memprediksi pola data
#metrics: Mean squared error, Mean absolute error
#model.compile(loss=tf.keras.losses.Huber(),
              #optimizer=optimizer,
              #metrics=["mae"])

#model.compile(loss=tf.keras.losses.Huber(),
#             optimizer=optimizer,
#              metrics=["mae"])

import pandas as pd
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from keras.layers import Dense, LSTM
from google.colab import files
uploaded = files.upload()

dweather = pd.read_csv('testset.csv') #header=None
dweather.head(6)

dweather.info()

dweather.shape

#null info sum
dweather.isnull().sum()

#fill null
dweather['datetime_utc']=pd.to_datetime(dweather['datetime_utc'])
dweather['datetime_utc'].head()
dweather[' _tempm'].fillna(dweather[' _tempm'].mean(), inplace=True) # we will fill the null row
dweather = dweather[['datetime_utc',' _tempm' ]]
dweather.head(6)

dnew=dweather[['datetime_utc',' _tempm']].copy()
dnew['just_date'] = dnew['datetime_utc'].dt.date

delhi_data=dnew.drop('datetime_utc',axis=1)
delhi_data.set_index('just_date', inplace= True)
delhi_data.head()

# get data values
date = dweather['datetime_utc'].values
temp = dweather[' _tempm'].values

import matplotlib.pyplot as plt

plt.figure(figsize=(17,8))
plt.plot(delhi_data)
plt.title('Delhi Weather')
plt.xlabel('Date')
plt.ylabel('temperature')
plt.show()

#Mengubah format menjadi numpy, dan mengembalikan label dan feature dari dataset dalam bentuk batch
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

#make sure the amount rows
dweather

#train_test split
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(temp, date, test_size = 0.2, random_state = 0 , shuffle=False)
print(len(x_train), len(x_test))

from keras.layers import Dense, LSTM

data_x_train = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=5000)
data_x_test = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

min = dweather[' _tempm'].min()
print('Min Value : ')
print(min)

max = dweather[' _tempm'].max()
print('Max Value : ')
print(max)

x = (90.0 - 1.0) * (10/100)
print(x)

#Callback opt
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< x):
      self.model.stop_training = True
      print("\nMAE of the model < 0.1 of data scale")
callbacks = myCallback()

tf.keras.backend.set_floatx('float64')
history = model.fit(data_x_train ,epochs=500, validation_data=data_x_test, callbacks=[callbacks])